{"ast":null,"code":"import React,{createContext,useState,useEffect}from'react';import axios from'axios';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();const AuthProvider=_ref=>{let{children}=_ref;//const [user, setUser] = useState(null);\nconst storedToken=localStorage.getItem('user');const[user,setUser]=useState(storedToken?{token:storedToken}:null);useEffect(()=>{// Check if user is already logged in (e.g., check local storage or session)\ntry{const storedUser=JSON.parse(localStorage.getItem('user'));if(storedUser){setUser(storedUser);}}catch(error){console.error('Error parsing user data from localStorage:',error);// Handle the error as needed (e.g., clear localStorage, set default user state)\n}},[]);const login=async token=>{localStorage.setItem('user',JSON.stringify({token}));setUser({token});};const logout=()=>{setUser(null);localStorage.removeItem('user');};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:{user,login,logout},children:children});};export{AuthContext,AuthProvider};","map":{"version":3,"names":["React","createContext","useState","useEffect","axios","jsx","_jsx","AuthContext","AuthProvider","_ref","children","storedToken","localStorage","getItem","user","setUser","token","storedUser","JSON","parse","error","console","login","setItem","stringify","logout","removeItem","Provider","value"],"sources":["C:/DigitalWave/InvoiceMgmt_UI-main/src/components/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst AuthContext = createContext();\n\n  const AuthProvider = ({ children }) => {\n  //const [user, setUser] = useState(null);\n  const storedToken = localStorage.getItem('user');\n  const [user, setUser] = useState(storedToken ? { token: storedToken } : null);\n\n  useEffect(() => {\n    // Check if user is already logged in (e.g., check local storage or session)\n    try{\n      const storedUser = JSON.parse(localStorage.getItem('user'));\n      if (storedUser) {\n        setUser(storedUser);\n      }\n    }\n    catch (error) {\n      console.error('Error parsing user data from localStorage:', error);\n      // Handle the error as needed (e.g., clear localStorage, set default user state)\n    }\n  }, []);\n\n  const login = async (token) => {\n    \n    localStorage.setItem('user', JSON.stringify({ token }));\n    setUser({ token });\n  };\n\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, login, logout }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport { AuthContext, AuthProvider };\n\n\n\n\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CACjE,MAAO,CAAAC,KAAK,KAAM,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE1B,KAAM,CAAAC,WAAW,cAAGN,aAAa,CAAC,CAAC,CAEjC,KAAM,CAAAO,YAAY,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAClC;AACA,KAAM,CAAAE,WAAW,CAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAChD,KAAM,CAACC,IAAI,CAAEC,OAAO,CAAC,CAAGb,QAAQ,CAACS,WAAW,CAAG,CAAEK,KAAK,CAAEL,WAAY,CAAC,CAAG,IAAI,CAAC,CAE7ER,SAAS,CAAC,IAAM,CACd;AACA,GAAG,CACD,KAAM,CAAAc,UAAU,CAAGC,IAAI,CAACC,KAAK,CAACP,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,CAAC,CAC3D,GAAII,UAAU,CAAE,CACdF,OAAO,CAACE,UAAU,CAAC,CACrB,CACF,CACA,MAAOG,KAAK,CAAE,CACZC,OAAO,CAACD,KAAK,CAAC,4CAA4C,CAAEA,KAAK,CAAC,CAClE;AACF,CACF,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAE,KAAK,CAAG,KAAO,CAAAN,KAAK,EAAK,CAE7BJ,YAAY,CAACW,OAAO,CAAC,MAAM,CAAEL,IAAI,CAACM,SAAS,CAAC,CAAER,KAAM,CAAC,CAAC,CAAC,CACvDD,OAAO,CAAC,CAAEC,KAAM,CAAC,CAAC,CACpB,CAAC,CAED,KAAM,CAAAS,MAAM,CAAGA,CAAA,GAAM,CACnBV,OAAO,CAAC,IAAI,CAAC,CACbH,YAAY,CAACc,UAAU,CAAC,MAAM,CAAC,CACjC,CAAC,CAED,mBACEpB,IAAA,CAACC,WAAW,CAACoB,QAAQ,EAACC,KAAK,CAAE,CAAEd,IAAI,CAAEQ,KAAK,CAAEG,MAAO,CAAE,CAAAf,QAAA,CAClDA,QAAQ,CACW,CAAC,CAE3B,CAAC,CAED,OAASH,WAAW,CAAEC,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}