{"ast":null,"code":"var _jsxFileName = \"C:\\\\InvoiceMgmt_UI\\\\invoicemgmt\\\\src\\\\components\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// import React, { createContext, useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// const AuthContext = createContext();\n\n//   const AuthProvider = ({ children }) => {\n//   //const [user, setUser] = useState(null);\n//   const storedToken = localStorage.getItem('user');\n//   const [user, setUser] = useState(storedToken ? { token: storedToken } : null);\n\n//   useEffect(() => {\n//     // Check if user is already logged in (e.g., check local storage or session)\n//     try{\n//       const storedUser = JSON.parse(localStorage.getItem('user'));\n//       if (storedUser) {\n//         setUser(storedUser);\n//       }\n//     }\n//     catch (error) {\n//       console.error('Error parsing user data from localStorage:', error);\n//       // Handle the error as needed (e.g., clear localStorage, set default user state)\n//     }\n//   }, []);\n\n//   const login = async (token) => {\n\n//     localStorage.setItem('user', JSON.stringify({ token }));\n//     setUser({ token });\n//   };\n\n//   const logout = () => {\n//     setUser(null);\n//     localStorage.removeItem('user');\n//   };\n\n//   return (\n//     <AuthContext.Provider value={{ user, login, logout }}>\n//       {children}\n//     </AuthContext.Provider>\n//   );\n// };\n\n// export { AuthContext, AuthProvider };\n\n// AuthContext.js\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const storedToken = localStorage.getItem('authToken');\n  const [user, setUser] = useState(storedToken ? {\n    token: storedToken\n  } : null);\n  useEffect(() => {\n    const token = localStorage.getItem('authToken');\n    if (token) {\n      setIsAuthenticated(true);\n      setUser({\n        token\n      });\n    }\n  }, []);\n  const login = token => {\n    localStorage.setItem('authToken', token);\n    setIsAuthenticated(true);\n    setUser({\n      token\n    });\n  };\n  const logout = () => {\n    localStorage.removeItem('authToken');\n    setIsAuthenticated(false);\n    setUser(null);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n_s2(AuthProvider, \"J1AtCk2+R5x5zhucstgzEguxkTI=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","isAuthenticated","setIsAuthenticated","storedToken","localStorage","getItem","user","setUser","token","login","setItem","logout","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/InvoiceMgmt_UI/invoicemgmt/src/components/AuthContext.js"],"sourcesContent":["// import React, { createContext, useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n\r\n// const AuthContext = createContext();\r\n\r\n//   const AuthProvider = ({ children }) => {\r\n//   //const [user, setUser] = useState(null);\r\n//   const storedToken = localStorage.getItem('user');\r\n//   const [user, setUser] = useState(storedToken ? { token: storedToken } : null);\r\n\r\n//   useEffect(() => {\r\n//     // Check if user is already logged in (e.g., check local storage or session)\r\n//     try{\r\n//       const storedUser = JSON.parse(localStorage.getItem('user'));\r\n//       if (storedUser) {\r\n//         setUser(storedUser);\r\n//       }\r\n//     }\r\n//     catch (error) {\r\n//       console.error('Error parsing user data from localStorage:', error);\r\n//       // Handle the error as needed (e.g., clear localStorage, set default user state)\r\n//     }\r\n//   }, []);\r\n\r\n//   const login = async (token) => {\r\n    \r\n//     localStorage.setItem('user', JSON.stringify({ token }));\r\n//     setUser({ token });\r\n//   };\r\n\r\n//   const logout = () => {\r\n//     setUser(null);\r\n//     localStorage.removeItem('user');\r\n//   };\r\n\r\n//   return (\r\n//     <AuthContext.Provider value={{ user, login, logout }}>\r\n//       {children}\r\n//     </AuthContext.Provider>\r\n//   );\r\n// };\r\n\r\n// export { AuthContext, AuthProvider };\r\n\r\n// AuthContext.js\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n    return useContext(AuthContext);\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n    const storedToken = localStorage.getItem('authToken');\r\n    const [user, setUser] = useState(storedToken ? { token: storedToken } : null);\r\n    useEffect(() => {\r\n        const token = localStorage.getItem('authToken');\r\n        if (token) {\r\n            setIsAuthenticated(true);\r\n            setUser({ token });\r\n        }\r\n    }, []);\r\n\r\n    const login = (token) => {\r\n        localStorage.setItem('authToken', token);\r\n        setIsAuthenticated(true);\r\n        setUser({ token });\r\n    };\r\n\r\n    const logout = () => {\r\n        localStorage.removeItem('authToken');\r\n        setIsAuthenticated(false);\r\n        setUser(null);\r\n    };\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ isAuthenticated, login, logout }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n"],"mappings":";;;AAAA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,MAAMO,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,OAAOP,UAAU,CAACK,WAAW,CAAC;AAClC,CAAC;AAACE,EAAA,CAFWD,OAAO;AAIpB,OAAO,MAAME,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC1C,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAMY,WAAW,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EACrD,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAACY,WAAW,GAAG;IAAEK,KAAK,EAAEL;EAAY,CAAC,GAAG,IAAI,CAAC;EAC7EX,SAAS,CAAC,MAAM;IACZ,MAAMgB,KAAK,GAAGJ,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IAC/C,IAAIG,KAAK,EAAE;MACPN,kBAAkB,CAAC,IAAI,CAAC;MACxBK,OAAO,CAAC;QAAEC;MAAM,CAAC,CAAC;IACtB;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,KAAK,GAAID,KAAK,IAAK;IACrBJ,YAAY,CAACM,OAAO,CAAC,WAAW,EAAEF,KAAK,CAAC;IACxCN,kBAAkB,CAAC,IAAI,CAAC;IACxBK,OAAO,CAAC;MAAEC;IAAM,CAAC,CAAC;EACtB,CAAC;EAED,MAAMG,MAAM,GAAGA,CAAA,KAAM;IACjBP,YAAY,CAACQ,UAAU,CAAC,WAAW,CAAC;IACpCV,kBAAkB,CAAC,KAAK,CAAC;IACzBK,OAAO,CAAC,IAAI,CAAC;EACjB,CAAC;EAED,oBACIb,OAAA,CAACC,WAAW,CAACkB,QAAQ;IAACC,KAAK,EAAE;MAAEb,eAAe;MAAEQ,KAAK;MAAEE;IAAO,CAAE;IAAAZ,QAAA,EAC3DA;EAAQ;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAE/B,CAAC;AAAClB,GAAA,CA7BWF,YAAY;AAAAqB,EAAA,GAAZrB,YAAY;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}